import { forwardRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Label } from '@/components/ui/label';
import { BarChart, Bar, XAxis, YAxis, Tooltip, AreaChart, Area, PieChart, Pie, Cell, ResponsiveContainer, LineChart, Line } from 'recharts';
import { Users, CheckCircle, Bug, Calendar, TrendingUp, Activity } from 'lucide-react';
import { motion } from 'framer-motion';

// Dummy Data for Real-time Project Stats
const dummyData = {
  teams: [
    { name: 'Frontend', completedTasks: 75, totalTasks: 100 },
    { name: 'Backend', completedTasks: 60, totalTasks: 80 },
    { name: 'DevOps', completedTasks: 45, totalTasks: 60 },
  ],
  tasksOverTime: [
    { date: '2025-09-01', completed: 20, inProgress: 10, pending: 20 },
    { date: '2025-09-08', completed: 25, inProgress: 8, pending: 15 },
    { date: '2025-09-15', completed: 30, inProgress: 5, pending: 10 },
  ],
  subtasks: [
    { name: 'Completed', value: 60 },
    { name: 'Pending', value: 40 },
  ],
  bugs: [
    { name: 'Open', value: 10 },
    { name: 'Resolved', value: 15 },
    { name: 'Critical', value: 3 },
  ],
  bugTrend: [
    { date: '2025-09-01', bugs: 15 },
    { date: '2025-09-08', bugs: 12 },
    { date: '2025-09-15', bugs: 10 },
  ],
  summary: {
    totalTeams: 3,
    totalTasks: 240,
    totalSubtasks: 100,
    bugs: { open: 10, resolved: 15, critical: 3 },
    completedMoms: 4,
  },
};

// Colors
const COLORS = {
  completed: '#22c55e',
  inProgress: '#facc15',
  pending: '#ef4444',
  open: '#3b82f6',
  resolved: '#22c55e',
  critical: '#ef4444',
};

const ProjectReport = forwardRef(({ dateRange, isPrintMode }, ref) => {
  if (isPrintMode) {
    return (
      <div ref={ref} className="p-6 bg-white text-gray-900 font-sans">
        <header className="text-center mb-6 border-b pb-2">
          <h1 className="text-2xl font-bold">Project Report</h1>
          <p className="text-sm">Generated on September 15, 2025 | Date Range: {dateRange}</p>
        </header>
        <section className="mb-4">
          <h2 className="text-lg font-semibold mb-2">Summary Statistics</h2>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 text-sm">
            <div>Teams: {dummyData.summary.totalTeams}</div>
            <div>Total Tasks: {dummyData.summary.totalTasks}</div>
            <div>Bugs Open: {dummyData.summary.bugs.open}</div>
            <div>Completed MOMs: {dummyData.summary.completedMoms}</div>
          </div>
        </section>
        <section className="mb-4">
          <h2 className="text-lg font-semibold mb-2">Team Progress</h2>
          <table className="w-full text-sm border-collapse">
            <thead>
              <tr className="border-b">
                <th className="text-left p-1">Team</th>
                <th className="text-left p-1">Completion %</th>
              </tr>
            </thead>
            <tbody>
              {dummyData.teams.map(team => (
                <tr key={team.name} className="border-b">
                  <td className="p-1">{team.name}</td>
                  <td className="p-1">{(team.completedTasks / team.totalTasks * 100).toFixed(1)}%</td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>
        <section className="mb-4">
          <h2 className="text-lg font-semibold mb-2">Tasks & Subtasks</h2>
          <div className="text-sm">
            <div>Completed Tasks: {dummyData.tasksOverTime[dummyData.tasksOverTime.length - 1].completed}</div>
            <div>In Progress: {dummyData.tasksOverTime[dummyData.tasksOverTime.length - 1].inProgress}</div>
            <div>Pending: {dummyData.tasksOverTime[dummyData.tasksOverTime.length - 1].pending}</div>
            <div>Completed Subtasks: {dummyData.subtasks[0].value}</div>
            <div>Pending Subtasks: {dummyData.subtasks[1].value}</div>
          </div>
        </section>
        <section className="mb-4">
          <h2 className="text-lg font-semibold mb-2">Bug Status</h2>
          <div className="text-sm">
            <div>Open: {dummyData.bugs[0].value}</div>
            <div>Resolved: {dummyData.bugs[1].value}</div>
            <div>Critical: {dummyData.bugs[2].value}</div>
            <div>Latest Bug Count: {dummyData.bugTrend[dummyData.bugTrend.length - 1].bugs}</div>
          </div>
        </section>
        <footer className="text-center mt-6 text-sm border-t pt-2">
          <p>Confidential - For Internal Use Only</p>
          <p>Generated by DevOps IT Management System</p>
        </footer>
      </div>
    );
  }

  return (
    <motion.div
      ref={ref}
      className="space-y-6"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <Users className="h-5 w-5 text-blue-500" />
            <CardTitle className="text-base">Teams</CardTitle>
          </CardHeader>
          <CardContent>
            <Label className="text-sm text-gray-600 dark:text-gray-400">Total</Label>
            <p className="text-xl font-bold text-gray-800 dark:text-gray-100">{dummyData.summary.totalTeams}</p>
            <Badge variant="secondary" className="mt-2">Active</Badge>
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-500" />
            <CardTitle className="text-base">Tasks</CardTitle>
          </CardHeader>
          <CardContent>
            <Label className="text-sm text-gray-600 dark:text-gray-400">Total</Label>
            <p className="text-xl font-bold text-gray-800 dark:text-gray-100">{dummyData.summary.totalTasks}</p>
            <Progress
              value={(dummyData.teams.reduce((sum, t) => sum + t.completedTasks, 0) / dummyData.summary.totalTasks) * 100}
              className="mt-2 h-2"
            />
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <Bug className="h-5 w-5 text-red-500" />
            <CardTitle className="text-base">Bugs</CardTitle>
          </CardHeader>
          <CardContent>
            <Label className="text-sm text-gray-600 dark:text-gray-400">Status</Label>
            <div className="flex gap-2 mt-2">
              <Badge variant="destructive">Open: {dummyData.summary.bugs.open}</Badge>
              <Badge variant="destructive">Critical: {dummyData.summary.bugs.critical}</Badge>
            </div>
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <Calendar className="h-5 w-5 text-purple-500" />
            <CardTitle className="text-base">MOMs</CardTitle>
          </CardHeader>
          <CardContent>
            <Label className="text-sm text-gray-600 dark:text-gray-400">Completed</Label>
            <p className="text-xl font-bold text-gray-800 dark:text-gray-100">{dummyData.summary.completedMoms}</p>
            <Badge variant="success" className="mt-2">On Track</Badge>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5 text-indigo-500" />
            <CardTitle className="text-base">Team Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={dummyData.teams}>
                <XAxis dataKey="name" tick={{ fill: '#6b7280' }} />
                <YAxis tick={{ fill: '#6b7280' }} />
                <Tooltip formatter={(value) => `${value}%`} contentStyle={{ backgroundColor: '#fff', borderRadius: '8px' }} />
                <Bar dataKey="completedTasks" fill={COLORS.completed} radius={[4, 4, 0, 0]} barSize={40}>
                  {dummyData.teams.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS.completed} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <Activity className="h-5 w-5 text-orange-500" />
            <CardTitle className="text-base">Bug Trend</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={dummyData.bugTrend}>
                <XAxis dataKey="date" tick={{ fill: '#6b7280' }} />
                <YAxis tick={{ fill: '#6b7280' }} />
                <Tooltip contentStyle={{ backgroundColor: '#fff', borderRadius: '8px' }} />
                <Line type="monotone" dataKey="bugs" stroke={COLORS.critical} strokeWidth={2} dot={{ r: 4, fill: COLORS.critical }} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-500" />
            <CardTitle className="text-base">Tasks Over Time</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <AreaChart data={dummyData.tasksOverTime}>
                <XAxis dataKey="date" tick={{ fill: '#6b7280' }} />
                <YAxis tick={{ fill: '#6b7280' }} />
                <Tooltip contentStyle={{ backgroundColor: '#fff', borderRadius: '8px' }} />
                <Area type="monotone" dataKey="completed" stackId="1" fill={COLORS.completed} stroke={COLORS.completed} fillOpacity={0.6} />
                <Area type="monotone" dataKey="inProgress" stackId="1" fill={COLORS.inProgress} stroke={COLORS.inProgress} fillOpacity={0.6} />
                <Area type="monotone" dataKey="pending" stackId="1" fill={COLORS.pending} stroke={COLORS.pending} fillOpacity={0.6} />
              </AreaChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow duration-300 bg-white dark:bg-gray-800">
          <CardHeader className="flex items-center gap-2">
            <Bug className="h-5 w-5 text-red-500" />
            <CardTitle className="text-base">Bug Status</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie
                  data={dummyData.bugs}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  innerRadius={50}
                  outerRadius={80}
                  label={({ name, value }) => `${name}: ${value}`}
                  labelLine={false}
                >
                  {dummyData.bugs.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[entry.name.toLowerCase()]} />
                  ))}
                </Pie>
                <Tooltip contentStyle={{ backgroundColor: '#fff', borderRadius: '8px' }} />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </motion.div>
  );
});

ProjectReport.displayName = 'ProjectReport';

export default ProjectReport;